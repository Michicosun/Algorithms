{\rtf1\ansi\ansicpg1251\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red255\green255\blue255;\red196\green26\blue22;
\red170\green13\blue145;\red0\green0\blue0;\red92\green38\blue153;\red46\green13\blue110;\red28\green0\blue207;
\red63\green110\blue116;\red38\green71\blue75;}
{\*\expandedcolortbl;;\csgenericrgb\c39100\c22000\c12500;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c77000\c10200\c8600;
\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c0\c0\c0;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c18100\c5200\c43100;\csgenericrgb\c11000\c0\c81000;
\csgenericrgb\c24700\c43100\c45600;\csgenericrgb\c14900\c27800\c29400;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 #include\cf4 <iostream>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <cmath>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <algorithm>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <vector>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <deque>
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 using\cf6  \cf5 namespace\cf6  \cf7 std\cf6 ;
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 const\cf6  \cf5 long\cf6  \cf5 double\cf6  PI = \cf8 atan2\cf6 (\cf9 0\cf6 , -\cf9 1\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf5 const\cf6  \cf5 long\cf6  \cf5 long\cf6  \cf5 int\cf6  INF = \cf9 1e9\cf6 ;
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 struct\cf6  Point\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 long\cf6  \cf5 long\cf6  \cf5 int\cf6  x, y;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     Point(\cf5 long\cf6  \cf5 long\cf6  \cf5 int\cf6  x0 = \cf9 0\cf6 , \cf5 long\cf6  \cf5 long\cf6  \cf5 int\cf6  y0 = \cf9 0\cf6 ) : \cf10 x\cf6 (x0), \cf10 y\cf6 (y0) \{\};
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \};
\f1\fs24 \cf0 \
\

\f0\fs22 \cf10 Point\cf6  first = \cf10 Point\cf6 (\cf10 INF\cf6 , \cf10 INF\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf10 Point\cf6  Q;
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 struct\cf6  Vector\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 long\cf6  \cf5 long\cf6  \cf5 int\cf6  x, y;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     Vector(\cf5 long\cf6  \cf5 long\cf6  \cf5 int\cf6  x0 = \cf9 0\cf6 , \cf5 long\cf6  \cf5 long\cf6  \cf5 int\cf6  y0 = \cf9 0\cf6 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf10 x\cf6  = x0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf10 y\cf6  = y0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \};
\f1\fs24 \cf0 \

\f0\fs22 \cf6     Vector(\cf5 const\cf6  \cf10 Point\cf6  & A, \cf5 const\cf6  \cf10 Point\cf6  & B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf10 x\cf6  = B.\cf10 x\cf6  - A.\cf10 x\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf10 y\cf6  = B.\cf10 y\cf6  - A.\cf10 y\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     Vector(\cf5 const\cf6  \cf10 Point\cf6  & A)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf10 x\cf6  = A.\cf10 x\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf10 y\cf6  = A.\cf10 y\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 long\cf6  \cf5 long\cf6  \cf5 int\cf6  len2()\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  \cf10 x\cf6  * \cf10 x\cf6  + \cf10 y\cf6  * \cf10 y\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \};
\f1\fs24 \cf0 \
\

\f0\fs22 \cf10 Vector\cf6  \cf5 operator\cf6  + (\cf10 Vector\cf6  A, \cf10 Vector\cf6  B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf10 Vector\cf6 (A.\cf10 x\cf6  + B.\cf10 x\cf6 , A.\cf10 y\cf6  + B.\cf10 y\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf10 Vector\cf6  \cf5 operator\cf6  * (\cf10 Vector\cf6  A, \cf5 int\cf6  x)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf10 Vector\cf6 (A.\cf10 x\cf6  * x, A.\cf10 y\cf6  * x);
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf7 istream\cf6  & \cf5 operator\cf6  >> (\cf7 istream\cf6  & in, \cf10 Point\cf6  & P)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  in >> P.\cf10 x\cf6  >> P.\cf10 y\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf7 ostream\cf6  & \cf5 operator\cf6  << (\cf7 ostream\cf6  & out, \cf10 Point\cf6  P)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  out << P.\cf10 x\cf6  << \cf4 " "\cf6  << P.\cf10 y\cf6  << \cf8 endl\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf7 ostream\cf6  & \cf5 operator\cf6  << (\cf7 ostream\cf6  & out, \cf10 Vector\cf6  P)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  out << \cf4 "\{"\cf6  << P.\cf10 x\cf6  << \cf4 " "\cf6  << P.\cf10 y\cf6  << \cf4 "\} "\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  \cf5 operator\cf6  == (\cf5 const\cf6  \cf10 Point\cf6  & A, \cf5 const\cf6  \cf10 Point\cf6  & B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  (A.\cf10 x\cf6  == B.\cf10 x\cf6  && A.\cf10 y\cf6  == B.\cf10 y\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  \cf5 operator\cf6  < (\cf5 const\cf6  \cf10 Point\cf6  & A, \cf5 const\cf6  \cf10 Point\cf6  & B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  (A.\cf10 y\cf6  < B.\cf10 y\cf6  || (A.\cf10 y\cf6  == B.\cf10 y\cf6  && A.\cf10 x\cf6  < B.\cf10 x\cf6 ));
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 long\cf6  \cf5 long\cf6  \cf5 int\cf6  dot_product(\cf5 const\cf6  \cf10 Vector\cf6  & A, \cf5 const\cf6  \cf10 Vector\cf6  & B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  A.\cf10 x\cf6  * B.\cf10 x\cf6  + A.\cf10 y\cf6  * B.\cf10 y\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 long\cf6  \cf5 long\cf6  \cf5 int\cf6  cross_product(\cf5 const\cf6  \cf10 Vector\cf6  & A, \cf5 const\cf6  \cf10 Vector\cf6  & B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  A.\cf10 x\cf6  * B.\cf10 y\cf6  - A.\cf10 y\cf6  * B.\cf10 x\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  cmp(\cf5 const\cf6  \cf10 Point\cf6  & A, \cf5 const\cf6  \cf10 Point\cf6  & B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf10 Vector\cf6  OA(\cf10 first\cf6 , A), OB(\cf10 first\cf6 , B);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf11 cross_product\cf6 (OA, OB) > \cf9 0\cf6  || (\cf11 cross_product\cf6 (OA, OB) == \cf9 0\cf6  && OA.\cf11 len2\cf6 () < OB.\cf11 len2\cf6 ());
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  is_right_turn(\cf10 Point\cf6  & a, \cf10 Point\cf6  & b, \cf10 Point\cf6  & c) \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf10 Vector\cf6  AB(a, b), BC(b, c);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf11 cross_product\cf6 (AB, BC) <= \cf9 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 void\cf6  getConvex(\cf7 vector\cf6 <\cf10 Point\cf6 > & Points, \cf7 vector\cf6 <\cf10 Point\cf6 > & st)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 int\cf6  ind = \cf9 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 int\cf6  n = (\cf5 int\cf6 )Points.\cf8 size\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6  (\cf5 int\cf6  i = \cf9 0\cf6 ; i < n; i++)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6  (Points[\cf8 i\cf6 ].\cf10 y\cf6  < \cf10 first\cf6 .\cf10 y\cf6 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf10 first\cf6  = Points[\cf8 i\cf6 ];
\f1\fs24 \cf0 \

\f0\fs22 \cf6             ind = i;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \}\cf5 else\cf6  \cf5 if\cf6  (Points[\cf8 i\cf6 ].\cf10 y\cf6  == \cf10 first\cf6 .\cf10 y\cf6  && Points[\cf8 i\cf6 ].\cf10 x\cf6  < \cf10 first\cf6 .\cf10 x\cf6 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf10 first\cf6  = Points[\cf8 i\cf6 ];
\f1\fs24 \cf0 \

\f0\fs22 \cf6             ind = i;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf8 swap\cf6 (Points[\cf8 ind\cf6 ], Points[\cf9 0\cf6 ]);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf8 sort\cf6 (Points.\cf8 begin\cf6 () + \cf9 1\cf6 , Points.\cf8 end\cf6 (), \cf11 cmp\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     st.\cf8 push_back\cf6 (\cf10 first\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6  (\cf5 int\cf6  i = \cf9 1\cf6 ; i < n; i++)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6  (st.\cf8 back\cf6 () == Points[\cf8 i\cf6 ])\cf5 continue\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 while\cf6  (st.\cf8 size\cf6 () >= \cf9 2\cf6  && (\cf11 is_right_turn\cf6 (st[\cf8 st\cf6 .\cf8 size\cf6 () - \cf9 2\cf6 ], st.\cf8 back\cf6 (), Points[\cf8 i\cf6 ])))\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6             st.\cf8 pop_back\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6         st.\cf8 push_back\cf6 (Points[\cf8 i\cf6 ]);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  cmp2(\cf5 const\cf6  \cf10 Vector\cf6  & A, \cf5 const\cf6  \cf10 Vector\cf6  & B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6  (A.\cf10 y\cf6  > \cf9 0\cf6  && B.\cf10 y\cf6  < \cf9 0\cf6 )\cf5 return\cf6  \cf5 false\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6  \cf5 if\cf6  (A.\cf10 y\cf6  == \cf9 0\cf6  && B.\cf10 y\cf6  == \cf9 0\cf6  && A.\cf10 x\cf6  > \cf9 0\cf6  && B.\cf10 x\cf6  < \cf9 0\cf6 )\cf5 return\cf6  \cf5 false\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  \cf11 cross_product\cf6 (A, B) > \cf9 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  onSegment(\cf5 const\cf6  \cf10 Point\cf6  & A, \cf5 const\cf6  \cf10 Point\cf6  & B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf10 Vector\cf6  AB(A, B);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf10 Vector\cf6  BA(B, A);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf10 Vector\cf6  AQ(A, \cf10 Q\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf10 Vector\cf6  BQ(B, \cf10 Q\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf11 cross_product\cf6 (AB, AQ) == \cf9 0\cf6  && \cf11 dot_product\cf6 (AB, AQ) >= \cf9 0\cf6  && \cf11 dot_product\cf6 (BA, BQ) >= \cf9 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  in(\cf7 vector\cf6 <\cf10 Point\cf6 > & convex)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 int\cf6  ind1 = (\cf5 int\cf6 )(\cf8 lower_bound\cf6 (convex.\cf8 begin\cf6 () + \cf9 1\cf6 , convex.\cf8 end\cf6 (), \cf10 Q\cf6 , \cf11 cmp2\cf6 ) - convex.\cf8 begin\cf6 ());
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 int\cf6  ind2 = ind1 - \cf9 1\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6  (ind1 == convex.\cf8 size\cf6 ())\cf5 return\cf6  \cf11 onSegment\cf6 (convex[\cf9 0\cf6 ], convex.\cf8 back\cf6 ());
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6  \cf5 if\cf6  (ind1 == \cf9 1\cf6 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  \cf11 onSegment\cf6 (convex[\cf9 0\cf6 ], convex[\cf9 1\cf6 ]);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}\cf5 else\cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf10 Vector\cf6  Q1(\cf10 Q\cf6 , convex[\cf8 ind1\cf6 ]);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf10 Vector\cf6  Q2(\cf10 Q\cf6 , convex[\cf8 ind2\cf6 ]);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf10 Vector\cf6  Qf(\cf10 Q\cf6 , \cf10 first\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf10 Vector\cf6  f1(\cf10 first\cf6 , convex[\cf8 ind1\cf6 ]);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf10 Vector\cf6  f2(\cf10 first\cf6 , convex[\cf8 ind2\cf6 ]);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 int\cf6  s1 = (\cf5 int\cf6 )\cf8 abs\cf6 (\cf11 cross_product\cf6 (f1, f2));
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 int\cf6  s2 = (\cf5 int\cf6 )(\cf8 abs\cf6 (\cf11 cross_product\cf6 (Q1, Q2)) + \cf8 abs\cf6 (\cf11 cross_product\cf6 (Q2, Qf)) + \cf8 abs\cf6 (\cf11 cross_product\cf6 (Qf, Q1)));
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 bool\cf6  ans = (s1 == s2);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  (ans || \cf11 onSegment\cf6 (convex[\cf8 ind2\cf6 ], convex[\cf8 ind1\cf6 ]));
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 long\cf6  \cf5 double\cf6  dist(\cf10 Point\cf6  & A, \cf10 Point\cf6  & B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  ((A.\cf10 x\cf6  - B.\cf10 x\cf6 ) * (A.\cf10 x\cf6  - B.\cf10 x\cf6 ) + (A.\cf10 y\cf6  - B.\cf10 y\cf6 ) * (A.\cf10 y\cf6  - B.\cf10 y\cf6 ));
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 signed\cf6  main()\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 int\cf6  n; \cf7 cin\cf6  >> n;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 vector\cf6 <\cf10 Point\cf6 > Point(n), convex;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6  (\cf5 int\cf6  i = \cf9 0\cf6 ; i < n; i++)\cf7 cin\cf6  >> Point[\cf8 i\cf6 ];
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf11 getConvex\cf6 (Point, convex);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     n = (\cf5 int\cf6 )convex.\cf8 size\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 vector\cf6 <\cf10 Vector\cf6 > Vectors;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6  (\cf5 int\cf6  i = \cf9 0\cf6 ; i < n; i++)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf10 Vector\cf6  a(convex[\cf8 i\cf6 ], convex[(\cf8 i\cf6  + \cf9 1\cf6 ) % \cf8 n\cf6 ]);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         Vectors.\cf8 push_back\cf6 (a);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 int\cf6  indUp = \cf9 0\cf6 , indDown = \cf9 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6  (\cf5 int\cf6  i = \cf9 0\cf6 ; i < n; i++)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6  (convex[\cf8 indUp\cf6 ] < convex[\cf8 i\cf6 ])indUp = i;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6  (convex[\cf8 i\cf6 ] < convex[\cf8 indDown\cf6 ])indDown = i;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 long\cf6  \cf5 double\cf6  ans = \cf9 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 int\cf6  d = indDown, u = indUp;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6  (\cf5 int\cf6  i = \cf9 0\cf6 ; i < \cf9 2\cf6  * n; i++)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         ans = \cf8 max\cf6 (ans, \cf11 dist\cf6 (convex[\cf8 d\cf6 ], convex[\cf8 u\cf6 ]));
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf10 Vector\cf6  down = Vectors[\cf8 d\cf6 ];
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf10 Vector\cf6  up = (Vectors[\cf8 u\cf6 ] * (-\cf9 1\cf6 ));
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6  (\cf11 cross_product\cf6 (down, up) > \cf9 0\cf6 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6             d = (d + \cf9 1\cf6 ) % n;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \}\cf5 else\cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6             u = (u + \cf9 1\cf6 ) % n;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 cout\cf6 .\cf8 precision\cf6 (\cf9 20\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 cout\cf6  << \cf8 sqrtl\cf6 (ans);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf9 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
}