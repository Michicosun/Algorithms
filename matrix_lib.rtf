{\rtf1\ansi\ansicpg1251\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red255\green255\blue255;\red196\green26\blue22;
\red170\green13\blue145;\red0\green0\blue0;\red92\green38\blue153;\red28\green0\blue207;\red63\green110\blue116;
\red46\green13\blue110;\red38\green71\blue75;}
{\*\expandedcolortbl;;\csgenericrgb\c39100\c22000\c12500;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c77000\c10200\c8600;
\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c0\c0\c0;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c24700\c43100\c45600;
\csgenericrgb\c18100\c5200\c43100;\csgenericrgb\c14900\c27800\c29400;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 #include\cf4 <iostream>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <cmath>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <map>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <stack>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <set>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <queue>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <algorithm>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <vector>
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 using\cf6  \cf5 namespace\cf6  \cf7 std\cf6 ;
\f1\fs24 \cf0 \
\

\f0\fs22 \cf2 #define int long long int
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 typedef\cf6  \cf7 vector\cf6 <\cf7 vector\cf6 <\cf5 int\cf6 >> matrix;
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 const\cf6  \cf5 int\cf6  mod = \cf8 1e9\cf6  + \cf8 7\cf6 ;
\f1\fs24 \cf0 \
\

\f0\fs22 \cf9 matrix\cf6  mult(\cf5 const\cf6  \cf9 matrix\cf6 & A, \cf5 const\cf6  \cf9 matrix\cf6 & B) \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 matrix\cf6  ans(A.\cf10 size\cf6 (), \cf7 vector\cf6 <\cf5 int\cf6 >(B.\cf10 front\cf6 ().\cf10 size\cf6 ()));
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6  (\cf5 int\cf6  i = \cf8 0\cf6 ; i < A.\cf10 size\cf6 (); ++i) \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 for\cf6  (\cf5 int\cf6  j = \cf8 0\cf6 ; j < B.\cf10 front\cf6 ().\cf10 size\cf6 (); ++j) \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 for\cf6  (\cf5 int\cf6  k = \cf8 0\cf6 ; k < B.\cf10 size\cf6 (); ++k) \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6                 ans[\cf10 i\cf6 ][\cf10 j\cf6 ] = (ans[\cf10 i\cf6 ][\cf10 j\cf6 ] + (A[\cf10 i\cf6 ][\cf10 k\cf6 ] * B[\cf10 k\cf6 ][\cf10 j\cf6 ]) % \cf9 mod\cf6 ) % \cf9 mod\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  ans;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf9 matrix\cf6  getE(\cf5 int\cf6  n) \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 matrix\cf6  ans(n, \cf7 vector\cf6 <\cf5 int\cf6 >(n));
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6  (\cf5 int\cf6  i = \cf8 0\cf6 ; i < n; ++i) ans[\cf10 i\cf6 ][\cf10 i\cf6 ] = \cf8 1\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  ans;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf9 matrix\cf6  fastPow(\cf5 const\cf6  \cf9 matrix\cf6 & A, \cf5 int\cf6  p) \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6  (p == \cf8 0\cf6 ) \cf5 return\cf6  \cf11 getE\cf6 (A.\cf10 size\cf6 ());
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6  \cf5 if\cf6  (p % \cf8 2\cf6  == \cf8 0\cf6 ) \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 auto\cf6  ans = \cf11 fastPow\cf6 (A, p / \cf8 2\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  \cf11 mult\cf6 (ans, ans);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \} \cf5 else\cf6  \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 auto\cf6  ans = \cf11 fastPow\cf6 (A, p - \cf8 1\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  \cf11 mult\cf6 (ans, A);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\
}