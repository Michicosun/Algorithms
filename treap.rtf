{\rtf1\ansi\ansicpg1251\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red255\green255\blue255;\red196\green26\blue22;
\red170\green13\blue145;\red0\green0\blue0;\red92\green38\blue153;\red63\green110\blue116;\red46\green13\blue110;
\red28\green0\blue207;\red38\green71\blue75;}
{\*\expandedcolortbl;;\csgenericrgb\c39100\c22000\c12500;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c77000\c10200\c8600;
\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c0\c0\c0;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c24700\c43100\c45600;\csgenericrgb\c18100\c5200\c43100;
\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c14900\c27800\c29400;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 #include\cf4 <iostream>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <algorithm>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <map>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <string>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <cstdlib>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <vector>
\f1\fs24 \cf0 \
\

\f0\fs22 \cf2 #define int long long int
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 using\cf6  \cf5 namespace\cf6  \cf7 std\cf6 ;
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 struct\cf6  node\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 int\cf6  x, y, d;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf8 node\cf6 * left;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf8 node\cf6 * right;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     node(\cf5 int\cf6  val)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf8 x\cf6  = val;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf8 y\cf6  = \cf9 rand\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf8 d\cf6  = \cf10 1\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf8 left\cf6  = \cf5 nullptr\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf8 right\cf6  = \cf5 nullptr\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     ~node()\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6 (\cf5 this\cf6 ->\cf8 left\cf6 )\cf5 delete\cf6  \cf5 this\cf6 ->\cf8 left\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6 (\cf5 this\cf6 ->\cf8 right\cf6 )\cf5 delete\cf6  \cf5 this\cf6 ->\cf8 right\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \};
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 typedef\cf6  \cf8 node\cf6 * pnode;
\f1\fs24 \cf0 \
\
\
\

\f0\fs22 \cf5 int\cf6  cnt(\cf8 pnode\cf6  t) \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (t)\cf5 return\cf6  t->\cf8 d\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6  \cf5 return\cf6  \cf10 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 void\cf6  recalc(\cf8 pnode\cf6  t) \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (t)t->\cf8 d\cf6  = \cf10 1\cf6  + \cf11 cnt\cf6 (t->\cf8 left\cf6 ) + \cf11 cnt\cf6 (t->\cf8 right\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf7 pair\cf6 <\cf8 pnode\cf6 , \cf8 pnode\cf6 > split(\cf8 pnode\cf6  root, \cf5 int\cf6  val)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (root == \cf5 nullptr\cf6 )\cf5 return\cf6  \{\cf5 nullptr\cf6 , \cf5 nullptr\cf6 \};
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (root->\cf8 x\cf6  <= val)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 auto\cf6  res = \cf11 split\cf6 (root->\cf8 right\cf6 , val);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         root->\cf8 right\cf6  = res.\cf7 first\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf11 recalc\cf6 (root);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf11 recalc\cf6 (res.\cf7 second\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  \{root, res.\cf7 second\cf6 \};
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}\cf5 else\cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 auto\cf6  res = \cf11 split\cf6 (root->\cf8 left\cf6 , val);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         root->\cf8 left\cf6  = res.\cf7 second\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf11 recalc\cf6 (res.\cf7 first\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf11 recalc\cf6 (root);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  \{res.\cf7 first\cf6 , root\};
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf8 pnode\cf6  merge(\cf8 pnode\cf6  left, \cf8 pnode\cf6  right)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (left == \cf5 nullptr\cf6 )\cf5 return\cf6  right;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (right == \cf5 nullptr\cf6 )\cf5 return\cf6  left;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (left->\cf8 y\cf6  <= right->\cf8 y\cf6 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         left->\cf8 right\cf6  = \cf11 merge\cf6 (left->\cf8 right\cf6 , right);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf11 recalc\cf6 (left);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  left;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}\cf5 else\cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         right->\cf8 left\cf6  = \cf11 merge\cf6 (left, right->\cf8 left\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf11 recalc\cf6 (right);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  right;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  exists(\cf8 pnode\cf6  root, \cf5 int\cf6  val)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (root == \cf5 nullptr\cf6 )\cf5 return\cf6  \cf5 false\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (root->\cf8 x\cf6  == val)\cf5 return\cf6  \cf5 true\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6  \cf5 if\cf6 (root->\cf8 x\cf6  > val)\cf5 return\cf6  \cf11 exists\cf6 (root->\cf8 left\cf6 , val);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6  \cf5 return\cf6  \cf11 exists\cf6 (root->\cf8 right\cf6 , val);
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf8 pnode\cf6  insert(\cf8 pnode\cf6  root, \cf5 int\cf6  val)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (\cf11 exists\cf6 (root, val))\cf5 return\cf6  root;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 auto\cf6  res = \cf11 split\cf6 (root, val);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf8 pnode\cf6  newnode = \cf5 new\cf6  \cf8 node\cf6 (val);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  \cf11 merge\cf6 (\cf11 merge\cf6 (res.\cf7 first\cf6 , newnode), res.\cf7 second\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf8 pnode\cf6  erase(\cf8 pnode\cf6  root, \cf5 int\cf6  val)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (!\cf11 exists\cf6 (root, val))\cf5 return\cf6  root;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 auto\cf6  res1 = \cf11 split\cf6 (root, val);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 auto\cf6  res = \cf11 split\cf6 (res1.\cf7 first\cf6 , val - \cf10 1\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  \cf11 merge\cf6 (res.\cf7 first\cf6 , res1.\cf7 second\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 void\cf6  print(\cf8 pnode\cf6  root)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (root == \cf5 nullptr\cf6 )\cf5 return\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf11 print\cf6 (root->\cf8 left\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf7 cout\cf6  << \cf4 "\{ "\cf6  << root->\cf8 x\cf6  << \cf4 " left = "\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6 (root->\cf8 left\cf6 )\cf7 cout\cf6  << root->\cf8 left\cf6 ->\cf8 x\cf6  << \cf4 "  right = "\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 else\cf6  \cf7 cout\cf6  << \cf4 "--  right = "\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6 (root->\cf8 right\cf6 )\cf7 cout\cf6  << root->\cf8 right\cf6 ->\cf8 x\cf6  << \cf4 "\}\\n"\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 else\cf6  \cf7 cout\cf6  << \cf4 "--\}\\n"\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf11 print\cf6 (root->\cf8 right\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 int\cf6  get_depth(\cf8 pnode\cf6  root)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (root == \cf5 nullptr\cf6 )\cf5 return\cf6  \cf10 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6  \cf5 return\cf6  \cf10 1\cf6  + \cf9 max\cf6 (\cf11 get_depth\cf6 (root->\cf8 left\cf6 ), \cf11 get_depth\cf6 (root->\cf8 right\cf6 ));
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 int\cf6  get_kth(\cf8 pnode\cf6  root, \cf5 int\cf6  k)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (root == \cf5 nullptr\cf6 )\cf5 return\cf6  -\cf10 1\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6  \cf5 if\cf6 (\cf11 cnt\cf6 (root->\cf8 left\cf6 ) + \cf10 1\cf6  == k)\cf5 return\cf6  root->\cf8 x\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6  \cf5 if\cf6 (\cf11 cnt\cf6 (root->\cf8 left\cf6 ) >= k)\cf5 return\cf6  \cf11 get_kth\cf6 (root->\cf8 left\cf6 , k);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6  \cf5 return\cf6  \cf11 get_kth\cf6 (root->\cf8 right\cf6 , k - \cf11 cnt\cf6 (root->\cf8 left\cf6 ) - \cf10 1\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 signed\cf6  main()\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf8 pnode\cf6  root = \cf5 nullptr\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     root = \cf11 insert\cf6 (root, \cf10 1\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     root = \cf11 insert\cf6 (root, \cf10 3\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     root = \cf11 insert\cf6 (root, \cf10 6\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     root = \cf11 insert\cf6 (root, \cf10 12\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     root = \cf11 insert\cf6 (root, \cf10 2\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     root = \cf11 insert\cf6 (root, \cf10 9\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     root = \cf11 insert\cf6 (root, \cf10 7\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     root = \cf11 insert\cf6 (root, \cf10 18\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf11 print\cf6 (root);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 cout\cf6  << \cf11 get_depth\cf6 (root) << \cf9 endl\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 cout\cf6  << \cf11 get_kth\cf6 (root, \cf10 1\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf10 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
}