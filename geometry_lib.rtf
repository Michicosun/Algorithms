{\rtf1\ansi\ansicpg1251\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red255\green255\blue255;\red196\green26\blue22;
\red170\green13\blue145;\red0\green0\blue0;\red28\green0\blue207;}
{\*\expandedcolortbl;;\csgenericrgb\c39100\c22000\c12500;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c77000\c10200\c8600;
\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c0\c0\c0;\csgenericrgb\c11000\c0\c81000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 #include\cf4 <iostream>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <cmath>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <vector>
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 using\cf6  \cf5 namespace\cf6  std;
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 double\cf6  PI = \cf7 3.14159265358979323846\cf6 ;
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 struct\cf6  Point\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  x, y;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     Point(\cf5 double\cf6  x0 = \cf7 0\cf6 , \cf5 double\cf6  y0 = \cf7 0\cf6 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->x = x0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->y = y0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \};
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 struct\cf6  Circle\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  x, y, r;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     Circle(\cf5 double\cf6  x0 = \cf7 0\cf6 , \cf5 double\cf6  y0 = \cf7 0\cf6 , \cf5 double\cf6  r0 = \cf7 0\cf6 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->x = x0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->y = y0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->r = r0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6     Point get_center()\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  Point(\cf5 this\cf6 ->x, \cf5 this\cf6 ->y);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \};
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 struct\cf6  Vector\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  x, y;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     Vector(\cf5 double\cf6  x0 = \cf7 0\cf6 , \cf5 double\cf6  y0 = \cf7 0\cf6 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->x = x0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->y = y0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     Vector(\cf5 const\cf6  Point & A, \cf5 const\cf6  Point & B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->x = B.x - A.x;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->y = B.y - A.y;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6     \cf5 double\cf6  len()\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  sqrt(x * x + y * y);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6     \cf5 double\cf6  angle()\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  atan2(y, x);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \};
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6 Vector \cf5 operator\cf6  / (Vector A, \cf5 double\cf6  d)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  Vector(A.x / d, A.y / d);
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \};
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6 Vector \cf5 operator\cf6  * (Vector A, \cf5 double\cf6  d)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  Vector(A.x * d, A.y * d);
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \};
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6 Point \cf5 operator\cf6  + (Point A, Vector B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  Point(A.x + B.x, A.y + B.y);
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 struct\cf6  Line\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  a, b, c;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     Line(\cf5 double\cf6  a0 = \cf7 0\cf6 , \cf5 double\cf6  b0 = \cf7 0\cf6 , \cf5 double\cf6  c0 = \cf7 0\cf6 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->a = a0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->b = b0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->c = c0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6     Vector normal()\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  Vector(a, b);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6     \cf5 double\cf6  perp_sz(\cf5 const\cf6  Point & C)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  (a * C.x + b * C.y + c) / sqrt(a * a + b * b);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6     Point perp(\cf5 const\cf6  Point & A)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 double\cf6  d = perp_sz(A);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         Vector n = normal();
\f1\fs24 \cf0 \

\f0\fs22 \cf6         n = n / n.len();
\f1\fs24 \cf0 \

\f0\fs22 \cf6         n = n * (-d);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  A + n;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6 \};
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6 istream & \cf5 operator\cf6  >> (istream & in, Point & P)
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     in >> P.x >> P.y;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  in;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6 istream & \cf5 operator\cf6  >> (istream & in, Vector & P)
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     in >> P.x >> P.y;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  in;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6 istream & \cf5 operator\cf6  >> (istream & in, Circle & P)
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     in >> P.x >> P.y >> P.r;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  in;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6 istream & \cf5 operator\cf6  >> (istream & in, Line & P)
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     in >> P.a >> P.b >> P.c;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  in;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6 ostream & \cf5 operator\cf6  << (ostream & out, Point P)
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     out.precision(\cf7 20\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     out << P.x << \cf4 " "\cf6  << P.y << endl;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  out;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6 ostream & \cf5 operator\cf6  << (ostream & out, Vector P)
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     out.precision(\cf7 20\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     out << P.x << \cf4 " "\cf6  << P.y << endl;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  out;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6 ostream & \cf5 operator\cf6  << (ostream & out, Circle P)
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     out.precision(\cf7 20\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     out << P.x << \cf4 " "\cf6  << P.y << \cf4 " "\cf6  << P.r << endl;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  out;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6 ostream & \cf5 operator\cf6  << (ostream & out, Line P)
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     out.precision(\cf7 20\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     out << P.a << \cf4 " "\cf6  << P.b << \cf4 " "\cf6  << P.c << endl;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  out;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 double\cf6  dot_product(\cf5 const\cf6  Vector & A, \cf5 const\cf6  Vector & B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  A.x * B.x + A.y * B.y;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 double\cf6  cross_product(\cf5 const\cf6  Vector & A, \cf5 const\cf6  Vector & B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  A.x * B.y - A.y * B.x;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 double\cf6  angle(Vector A, Vector B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  ans = dot_product(A, B) / (A.len() * B.len());
\f1\fs24 \cf0 \

\f0\fs22 \cf6     cout << B << \cf4 "-"\cf6  << endl;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (ans < -\cf7 1\cf6 )ans = -\cf7 1\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (ans > \cf7 1\cf6 )ans = \cf7 1\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  ans;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6 Vector ort(Vector A)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  Vector(-A.y, A.x);
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  one(\cf5 double\cf6  a, \cf5 double\cf6  b)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  a * b > \cf7 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6 Vector rotate_v(\cf5 const\cf6  Vector & A, \cf5 double\cf6  angle_rad)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  Vector((A.x * cos(angle_rad) - A.y * sin(angle_rad)), (A.x * sin(angle_rad) + A.y * cos(angle_rad)));
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
}