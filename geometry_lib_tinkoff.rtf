{\rtf1\ansi\ansicpg1251\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red255\green255\blue255;\red196\green26\blue22;
\red170\green13\blue145;\red0\green0\blue0;\red92\green38\blue153;\red28\green0\blue207;\red63\green110\blue116;
\red46\green13\blue110;\red38\green71\blue75;}
{\*\expandedcolortbl;;\csgenericrgb\c39100\c22000\c12500;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c77000\c10200\c8600;
\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c0\c0\c0;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c24700\c43100\c45600;
\csgenericrgb\c18100\c5200\c43100;\csgenericrgb\c14900\c27800\c29400;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 #pragma comment(linker, \cf4 "/stack:200000000"\cf2 )
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #pragma GCC optimize(\cf4 "Ofast"\cf2 )
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #pragma GCC target(\cf4 "sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"\cf2 )
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <iostream>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <cmath>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <algorithm>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <vector>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <map>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <unordered_set>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <map>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <algorithm>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <queue>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <stack>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <cstdio>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <cassert>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <sstream>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <set>
\f1\fs24 \cf0 \
\

\f0\fs22 \cf2 #define double long double
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 using\cf6  \cf5 namespace\cf6  \cf7 std\cf6 ;
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 const\cf6  \cf5 double\cf6  PI = \cf8 3.14159265358979323846\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf5 const\cf6  \cf5 double\cf6  maxN = \cf8 1e10\cf6 ;
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 double\cf6  sqr(\cf5 double\cf6  a)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  a * a;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 struct\cf6  Point\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  x, y;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 int\cf6  ind;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     Point(\cf5 double\cf6  x0 = \cf8 0\cf6 , \cf5 double\cf6  y0 = \cf8 0\cf6 , \cf5 int\cf6  ind = \cf8 0\cf6 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf9 x\cf6  = x0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf9 y\cf6  = y0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf9 ind\cf6  = ind;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \};
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  \cf5 operator\cf6  == (\cf5 const\cf6  \cf9 Point\cf6  & a, \cf5 const\cf6  \cf9 Point\cf6  & b)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  a.\cf9 x\cf6  == b.\cf9 x\cf6  && a.\cf9 y\cf6  == b.\cf9 y\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  \cf5 operator\cf6  < (\cf5 const\cf6  \cf9 Point\cf6  & a, \cf5 const\cf6  \cf9 Point\cf6  & b)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  a.\cf9 x\cf6  < b.\cf9 x\cf6  || (a.\cf9 x\cf6  == b.\cf9 x\cf6  && a.\cf9 y\cf6  < b.\cf9 y\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 struct\cf6  Vector\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  x, y;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 int\cf6  ind;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     Vector(\cf5 double\cf6  x0 = \cf8 0\cf6 , \cf5 double\cf6  y0 = \cf8 0\cf6 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf9 x\cf6  = x0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf9 y\cf6  = y0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     Vector(\cf5 const\cf6  \cf9 Point\cf6  & A, \cf5 const\cf6  \cf9 Point\cf6  & B, \cf5 int\cf6  ind = \cf8 0\cf6 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf9 x\cf6  = B.\cf9 x\cf6  - A.\cf9 x\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf9 y\cf6  = B.\cf9 y\cf6  - A.\cf9 y\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf9 ind\cf6  = ind;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  len()\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  \cf10 sqrt\cf6 (\cf9 x\cf6  * \cf9 x\cf6  + \cf9 y\cf6  * \cf9 y\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  angle() \cf5 const\cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  \cf10 atan2\cf6 (\cf9 y\cf6 , \cf9 x\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \};
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 struct\cf6  Circle\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  x, y, r;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     Circle(\cf5 double\cf6  x0 = \cf8 0\cf6 , \cf5 double\cf6  y0 = \cf8 0\cf6 , \cf5 double\cf6  r0 = \cf8 0\cf6 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf9 x\cf6  = x0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf9 y\cf6  = y0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf9 r\cf6  = r0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Point\cf6  get_center()\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  \cf9 Point\cf6 (\cf5 this\cf6 ->\cf9 x\cf6 , \cf5 this\cf6 ->\cf9 y\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  getSubS(\cf5 double\cf6  ang)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  ang * \cf9 r\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \};
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  \cf5 operator\cf6  == (\cf9 Circle\cf6  & a, \cf9 Circle\cf6  & b)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  a.\cf9 x\cf6  == b.\cf9 x\cf6  && a.\cf9 y\cf6  == b.\cf9 y\cf6  && a.\cf9 r\cf6  == b.\cf9 r\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf9 Vector\cf6  \cf5 operator\cf6  / (\cf9 Vector\cf6  A, \cf5 double\cf6  d)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf9 Vector\cf6 (A.\cf9 x\cf6  / d, A.\cf9 y\cf6  / d);
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \};
\f1\fs24 \cf0 \
\

\f0\fs22 \cf9 Vector\cf6  \cf5 operator\cf6  * (\cf9 Vector\cf6  A, \cf5 double\cf6  d)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf9 Vector\cf6 (A.\cf9 x\cf6  * d, A.\cf9 y\cf6  * d);
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \};
\f1\fs24 \cf0 \
\

\f0\fs22 \cf9 Point\cf6  \cf5 operator\cf6  + (\cf9 Point\cf6  A, \cf9 Vector\cf6  B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf9 Point\cf6 (A.\cf9 x\cf6  + B.\cf9 x\cf6 , A.\cf9 y\cf6  + B.\cf9 y\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 struct\cf6  Line\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  a, b, c;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     Line(\cf5 double\cf6  a0 = \cf8 0\cf6 , \cf5 double\cf6  b0 = \cf8 0\cf6 , \cf5 double\cf6  c0 = \cf8 0\cf6 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf9 a\cf6  = a0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf9 b\cf6  = b0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf9 c\cf6  = c0;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     Line(\cf9 Point\cf6  & A, \cf9 Point\cf6  & B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf9 Vector\cf6  AB(A, B);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf9 b\cf6  = -AB.\cf9 x\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf9 a\cf6  = AB.\cf9 y\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf9 c\cf6  = -\cf9 a\cf6  * A.\cf9 x\cf6  - \cf9 b\cf6  * A.\cf9 y\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     Line(\cf9 Point\cf6  & A, \cf9 Vector\cf6  & C)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf9 Point\cf6  B = A + C;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf9 Line\cf6 (A, B);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Vector\cf6  normal()\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  \cf9 Vector\cf6 (\cf9 a\cf6 , \cf9 b\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Point\cf6  getPoint()\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 double\cf6  x = -(\cf9 a\cf6  * \cf9 c\cf6 ) / (\cf9 a\cf6  * \cf9 a\cf6  + \cf9 b\cf6  * \cf9 b\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 double\cf6  y = -(\cf9 b\cf6  * \cf9 c\cf6 ) / (\cf9 a\cf6  * \cf9 a\cf6  + \cf9 b\cf6  * \cf9 b\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  \cf9 Point\cf6 (x, y);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  get(\cf9 Point\cf6  & A)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  \cf9 a\cf6  * A.\cf9 x\cf6  + \cf9 b\cf6  * A.\cf9 y\cf6  + \cf9 c\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  perp_sz(\cf5 const\cf6  \cf9 Point\cf6  & C)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  (\cf9 a\cf6  * C.\cf9 x\cf6  + \cf9 b\cf6  * C.\cf9 y\cf6  + \cf9 c\cf6 ) / \cf10 sqrt\cf6 (\cf9 a\cf6  * \cf9 a\cf6  + \cf9 b\cf6  * \cf9 b\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Point\cf6  proection(\cf5 const\cf6  \cf9 Point\cf6  & A)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 double\cf6  d = \cf11 perp_sz\cf6 (A);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf9 Vector\cf6  n = \cf11 normal\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6         n = n / n.\cf11 len\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf9 Vector\cf6  n1 = n * d, n2 = n * (-d);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf9 Point\cf6  A1 = A + n1, A2 = A + n2;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6 (\cf11 get\cf6 (A1) == \cf8 0\cf6 )\cf5 return\cf6  A1;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 else\cf6  \cf5 return\cf6  A2;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \};
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 struct\cf6  Ray\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Point\cf6  A, B;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     Ray()\{\};
\f1\fs24 \cf0 \

\f0\fs22 \cf6     Ray(\cf9 Point\cf6  & A, \cf9 Point\cf6  & B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf9 A\cf6  = A;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf9 B\cf6  = B;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \};
\f1\fs24 \cf0 \
\

\f0\fs22 \cf7 istream\cf6  & \cf5 operator\cf6  >> (\cf7 istream\cf6  & in, \cf9 Circle\cf6  & P)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  in >> P.\cf9 x\cf6  >> P.\cf9 y\cf6  >> P.\cf9 r\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf7 istream\cf6  & \cf5 operator\cf6  >> (\cf7 istream\cf6  & in, \cf9 Point\cf6  & P)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  in >> P.\cf9 x\cf6  >> P.\cf9 y\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf7 istream\cf6  & \cf5 operator\cf6  >> (\cf7 istream\cf6  & in, \cf9 Vector\cf6  & P)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  in >> P.\cf9 x\cf6  >> P.\cf9 y\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf7 istream\cf6  & \cf5 operator\cf6  >> (\cf7 istream\cf6  & in, \cf9 Line\cf6  & P)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  in >> P.\cf9 a\cf6  >> P.\cf9 b\cf6  >> P.\cf9 c\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf7 ostream\cf6  & \cf5 operator\cf6  << (\cf7 ostream\cf6  & out, \cf9 Point\cf6  P)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     out.\cf10 precision\cf6 (\cf8 20\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  out << P.\cf9 x\cf6  << \cf4 " "\cf6  << P.\cf9 y\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf7 ostream\cf6  & \cf5 operator\cf6  << (\cf7 ostream\cf6  & out, \cf9 Vector\cf6  P)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     out.\cf10 precision\cf6 (\cf8 20\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  out << P.\cf9 x\cf6  << \cf4 " "\cf6  << P.\cf9 y\cf6  << \cf10 endl\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf7 ostream\cf6  & \cf5 operator\cf6  << (\cf7 ostream\cf6  & out, \cf9 Line\cf6  P)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     out.\cf10 precision\cf6 (\cf8 20\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  out << P.\cf9 a\cf6  << \cf4 " "\cf6  << P.\cf9 b\cf6  << \cf4 " "\cf6  << P.\cf9 c\cf6  << \cf10 endl\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 double\cf6  dot_product(\cf5 const\cf6  \cf9 Vector\cf6  & A, \cf5 const\cf6  \cf9 Vector\cf6  & B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  A.\cf9 x\cf6  * B.\cf9 x\cf6  + A.\cf9 y\cf6  * B.\cf9 y\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 double\cf6  cross_product(\cf5 const\cf6  \cf9 Vector\cf6  & A, \cf5 const\cf6  \cf9 Vector\cf6  & B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  A.\cf9 x\cf6  * B.\cf9 y\cf6  - A.\cf9 y\cf6  * B.\cf9 x\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 double\cf6  angle(\cf9 Vector\cf6  A, \cf9 Vector\cf6  B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf10 fabs\cf6 (\cf10 atan2\cf6 (\cf11 cross_product\cf6 (A, B), \cf11 dot_product\cf6 (A, B)));
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf9 Vector\cf6  ort(\cf9 Vector\cf6  A)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf9 Vector\cf6 (-A.\cf9 y\cf6 , A.\cf9 x\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  one(\cf5 double\cf6  a, \cf5 double\cf6  b)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  a * b >= \cf8 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf9 Vector\cf6  rotate_v(\cf5 const\cf6  \cf9 Vector\cf6  & A, \cf5 double\cf6  angle_rad)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf9 Vector\cf6 ((A.\cf9 x\cf6  * \cf10 cos\cf6 (angle_rad) - A.\cf9 y\cf6  * \cf10 sin\cf6 (angle_rad)), (A.\cf9 x\cf6  * \cf10 sin\cf6 (angle_rad) + A.\cf9 y\cf6  * \cf10 cos\cf6 (angle_rad)));
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf9 Point\cf6  zero = \cf9 Point\cf6 (\cf8 0\cf6 , \cf8 0\cf6 );
\f1\fs24 \cf0 \
\

\f0\fs22 \cf7 vector\cf6 <\cf9 Point\cf6 > intersect(\cf9 Line\cf6  & a, \cf9 Line\cf6  & b)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (\cf11 cross_product\cf6 (a.\cf11 normal\cf6 (), b.\cf11 normal\cf6 ()) == \cf8 0\cf6 )\cf5 return\cf6  \{\};
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  x = (b.\cf9 c\cf6  * a.\cf9 b\cf6  - b.\cf9 b\cf6  * a.\cf9 c\cf6 ) / (b.\cf9 b\cf6  * a.\cf9 a\cf6  - a.\cf9 b\cf6  * b.\cf9 a\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  y = (b.\cf9 c\cf6  * a.\cf9 a\cf6  - a.\cf9 c\cf6  * b.\cf9 a\cf6 ) / (a.\cf9 b\cf6  * b.\cf9 a\cf6  - b.\cf9 b\cf6  * a.\cf9 a\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \{\cf9 Point\cf6 (x, y)\};
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf7 vector\cf6 <\cf9 Point\cf6 > intersect(\cf9 Circle\cf6  & c, \cf9 Line\cf6  & a)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (a.\cf11 perp_sz\cf6 (c.\cf11 get_center\cf6 ()) > c.\cf9 r\cf6 )\cf5 return\cf6  \{\};
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6  \cf5 if\cf6 (a.\cf11 perp_sz\cf6 (c.\cf11 get_center\cf6 ()) == c.\cf9 r\cf6 )\cf5 return\cf6  \{a.\cf11 proection\cf6 (c.\cf11 get_center\cf6 ())\};
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf9 Point\cf6  S = a.\cf11 proection\cf6 (c.\cf11 get_center\cf6 ());
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf9 Vector\cf6  n = \cf11 ort\cf6 (a.\cf11 normal\cf6 ());
\f1\fs24 \cf0 \

\f0\fs22 \cf6         n = n / n.\cf11 len\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 double\cf6  sz = \cf10 sqrt\cf6 (\cf11 sqr\cf6 (c.\cf9 r\cf6 ) - \cf11 sqr\cf6 (a.\cf11 perp_sz\cf6 (c.\cf11 get_center\cf6 ())));
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf9 Vector\cf6  n1 = n * sz;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf9 Vector\cf6  n2 = n * (-sz);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  \{S + n1, S + n2\};
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf7 vector\cf6 <\cf9 Point\cf6 > intersect(\cf9 Circle\cf6  & a, \cf9 Circle\cf6  & b)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Vector\cf6  AB(a.\cf11 get_center\cf6 (), b.\cf11 get_center\cf6 ());
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (AB.\cf11 len\cf6 () > a.\cf9 r\cf6  + b.\cf9 r\cf6 )\cf5 return\cf6  \{\};
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 double\cf6  la = \cf8 2\cf6  * a.\cf9 x\cf6  - \cf8 2\cf6  * b.\cf9 x\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 double\cf6  lb = \cf8 2\cf6  * a.\cf9 y\cf6  - \cf8 2\cf6  * b.\cf9 y\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 double\cf6  lc = \cf11 sqr\cf6 (b.\cf9 x\cf6 ) + \cf11 sqr\cf6 (b.\cf9 y\cf6 ) - \cf11 sqr\cf6 (b.\cf9 r\cf6 ) - \cf11 sqr\cf6 (a.\cf9 x\cf6 ) - \cf11 sqr\cf6 (a.\cf9 y\cf6 ) + \cf11 sqr\cf6 (a.\cf9 r\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf9 Line\cf6  l(la, lb, lc);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  \cf11 intersect\cf6 (a, l);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  cmpAndrew(\cf5 const\cf6  \cf9 Point\cf6  & a, \cf5 const\cf6  \cf9 Point\cf6  & b) \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (a.\cf9 x\cf6  == b.\cf9 x\cf6 )\cf5 return\cf6  a.\cf9 y\cf6  < b.\cf9 y\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  a.\cf9 x\cf6  < b.\cf9 x\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  cw(\cf9 Point\cf6  a, \cf9 Point\cf6  b, \cf9 Point\cf6  c)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf11 cross_product\cf6 (\cf9 Vector\cf6 (b, a), \cf9 Vector\cf6 (b, c)) > \cf8 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  ccw(\cf9 Point\cf6  a, \cf9 Point\cf6  b, \cf9 Point\cf6  c)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf11 cross_product\cf6 (\cf9 Vector\cf6 (b, a), \cf9 Vector\cf6 (b, c)) < \cf8 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf7 vector\cf6 <\cf9 Point\cf6 > Andrew(\cf7 vector\cf6 <\cf9 Point\cf6 > & points)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf10 sort\cf6 (points.\cf10 begin\cf6 (), points.\cf10 end\cf6 (), \cf11 cmpAndrew\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 vector\cf6 <\cf9 Point\cf6 > up, down;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     up.\cf10 push_back\cf6 (points[\cf8 0\cf6 ]);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     down.\cf10 push_back\cf6 (points[\cf8 0\cf6 ]);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Point\cf6  p1 = points[\cf8 0\cf6 ], p2 = points.\cf10 back\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 int\cf6  n = (\cf5 int\cf6 )points.\cf10 size\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6 (\cf5 int\cf6  i = \cf8 1\cf6 ; i < n; i++) \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6  (i == n - \cf8 1\cf6  || \cf11 cw\cf6 (p1, points[\cf10 i\cf6 ], p2)) \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 while\cf6  (up.\cf10 size\cf6 () >= \cf8 2\cf6  && !\cf11 cw\cf6 (up[\cf10 up\cf6 .\cf10 size\cf6 () - \cf8 2\cf6 ], up[\cf10 up\cf6 .\cf10 size\cf6 () - \cf8 1\cf6 ], points[\cf10 i\cf6 ])) \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6                 up.\cf10 pop_back\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6             up.\cf10 push_back\cf6 (points[\cf10 i\cf6 ]);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6  (i == n - \cf8 1\cf6  || \cf11 ccw\cf6 (p1, points[\cf10 i\cf6 ], p2)) \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 while\cf6  (down.\cf10 size\cf6 () >= \cf8 2\cf6  && !\cf11 ccw\cf6 (down[\cf10 down\cf6 .\cf10 size\cf6 () - \cf8 2\cf6 ], down[\cf10 down\cf6 .\cf10 size\cf6 () - \cf8 1\cf6 ], points[\cf10 i\cf6 ])) \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6                 down.\cf10 pop_back\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6             down.\cf10 push_back\cf6 (points[\cf10 i\cf6 ]);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 vector\cf6 <\cf9 Point\cf6 > convexHall;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6 (\cf5 auto\cf6  i : down)convexHall.\cf10 push_back\cf6 (i);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6 (\cf5 int\cf6  i = (\cf5 int\cf6 )up.\cf10 size\cf6 () - \cf8 2\cf6 ; i >= \cf8 1\cf6 ; i--)convexHall.\cf10 push_back\cf6 (up[\cf10 i\cf6 ]);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  convexHall;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf9 Point\cf6  first;
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 struct\cf6  node\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Point\cf6  now, up, down;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     node(\cf9 Point\cf6  & now)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf9 now\cf6  = now;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     node(\cf9 Point\cf6  & down, \cf9 Point\cf6  & now)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf9 down\cf6  = down;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->\cf9 now\cf6  = now;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \};
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  cmpGraham(\cf5 const\cf6  \cf9 Point\cf6  & A, \cf5 const\cf6  \cf9 Point\cf6  & B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Vector\cf6  OA(\cf9 first\cf6 , A);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Vector\cf6  OB(\cf9 first\cf6 , B);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf11 cross_product\cf6 (OA, OB) > \cf8 0\cf6  || (\cf11 cross_product\cf6 (OA, OB) == \cf8 0\cf6  && OA.\cf11 len\cf6 () < OB.\cf11 len\cf6 ());
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf7 vector\cf6 <\cf9 node\cf6 > Graham(\cf7 vector\cf6 <\cf9 Point\cf6 > & points, \cf7 unordered_set\cf6 <\cf5 int\cf6 > & ind)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 first\cf6  = \cf9 Point\cf6 (\cf8 1e10\cf6 , \cf8 1e10\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 int\cf6  n = (\cf5 int\cf6 )points.\cf10 size\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6 (\cf5 int\cf6  i = \cf8 0\cf6 ; i < n; i++)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6 (points[\cf10 i\cf6 ] < \cf9 first\cf6 )\cf9 first\cf6  = points[\cf10 i\cf6 ];
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf10 sort\cf6 (points.\cf10 begin\cf6 (), points.\cf10 end\cf6 (), \cf11 cmpGraham\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 vector\cf6 <\cf9 node\cf6 > convex = \{\cf9 node\cf6 (points[\cf8 0\cf6 ]), \cf9 node\cf6 (points[\cf8 0\cf6 ], points[\cf8 1\cf6 ])\};
\f1\fs24 \cf0 \

\f0\fs22 \cf6     convex[\cf8 0\cf6 ].\cf9 up\cf6  = points[\cf8 1\cf6 ];
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6 (\cf5 int\cf6  i = \cf8 2\cf6 ; i < n; i++)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 int\cf6  l = (\cf5 int\cf6 )convex.\cf10 size\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf9 Vector\cf6  oldV(convex[\cf10 l\cf6  - \cf8 2\cf6 ].\cf9 now\cf6 , convex[\cf10 l\cf6  - \cf8 1\cf6 ].\cf9 now\cf6 ), newV(convex[\cf10 l\cf6  - \cf8 1\cf6 ].\cf9 now\cf6 , points[\cf10 i\cf6 ]);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 while\cf6  (\cf11 cross_product\cf6 (oldV, newV) < \cf8 0\cf6 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6             convex.\cf10 pop_back\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6             l = (\cf5 int\cf6 )convex.\cf10 size\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6             oldV = \cf9 Vector\cf6 (convex[\cf10 l\cf6  - \cf8 2\cf6 ].\cf9 now\cf6 , convex[\cf10 l\cf6  - \cf8 1\cf6 ].\cf9 now\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6             newV = \cf9 Vector\cf6 (convex[\cf10 l\cf6  - \cf8 1\cf6 ].\cf9 now\cf6 , points[\cf10 i\cf6 ]);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf9 Point\cf6  down = convex.\cf10 back\cf6 ().\cf9 now\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         convex.\cf10 back\cf6 ().\cf9 up\cf6  = points[\cf10 i\cf6 ];
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6 (\cf11 cross_product\cf6 (oldV, newV) == \cf8 0\cf6 )convex.\cf10 pop_back\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6         convex.\cf10 push_back\cf6 (\cf9 node\cf6 (down, points[\cf10 i\cf6 ]));
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     convex[\cf8 0\cf6 ].\cf9 down\cf6  = convex.\cf10 back\cf6 ().\cf9 now\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     convex.\cf10 back\cf6 ().\cf9 up\cf6  = convex[\cf8 0\cf6 ].\cf9 now\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6 (\cf5 auto\cf6  i : convex)ind.\cf10 insert\cf6 (i.\cf9 now\cf6 .\cf9 ind\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  convex;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf7 vector\cf6 <\cf9 Point\cf6 > convexHall;
\f1\fs24 \cf0 \

\f0\fs22 \cf7 vector\cf6 <\cf9 Vector\cf6 > up, down;
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  cmpV(\cf5 const\cf6  \cf9 Vector\cf6  & a, \cf5 const\cf6  \cf9 Vector\cf6  & b)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf11 cross_product\cf6 (a, b) > \cf8 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 void\cf6  preTangents(\cf7 vector\cf6 <\cf9 Point\cf6 > & points)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 convexHall\cf6  = \cf11 Andrew\cf6 (points);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6 (\cf5 int\cf6  i = \cf8 0\cf6 ; i < \cf9 convexHall\cf6 .\cf10 size\cf6 (); i++)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf9 Point\cf6  A = \cf9 convexHall\cf6 [\cf10 i\cf6 ], B = \cf9 convexHall\cf6 [(\cf10 i\cf6  + \cf8 1\cf6 ) % \cf10 convexHall\cf6 .\cf10 size\cf6 ()];
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf9 Vector\cf6  AB(A, B, i);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6 (AB.\cf11 angle\cf6 () >= \cf8 0\cf6  || \cf10 fabs\cf6 (AB.\cf11 angle\cf6 ()) == \cf9 PI\cf6 )\cf9 up\cf6 .\cf10 push_back\cf6 (AB);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 else\cf6  \cf9 down\cf6 .\cf10 push_back\cf6 (AB);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf10 sort\cf6 (\cf9 up\cf6 .\cf10 begin\cf6 (), \cf9 up\cf6 .\cf10 end\cf6 (), \cf11 cmpV\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf10 sort\cf6 (\cf9 down\cf6 .\cf10 begin\cf6 (), \cf9 down\cf6 .\cf10 end\cf6 (), \cf11 cmpV\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf7 vector\cf6 <\cf9 Point\cf6 > tangents(\cf9 Line\cf6  & l)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (\cf9 convexHall\cf6 .\cf10 size\cf6 () == \cf8 1\cf6 )\cf5 return\cf6  \{\cf9 convexHall\cf6 [\cf8 0\cf6 ], \cf9 convexHall\cf6 [\cf8 0\cf6 ]\};
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6  \cf5 if\cf6 (\cf9 convexHall\cf6 .\cf10 size\cf6 () == \cf8 2\cf6 )\cf5 return\cf6  \cf9 convexHall\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf9 Vector\cf6  n1 = \cf11 ort\cf6 (l.\cf11 normal\cf6 ());
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf9 Vector\cf6  n2 = n1 * -\cf8 1\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 int\cf6  ind1, ind2;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6 (n1.\cf11 angle\cf6 () >= \cf8 0\cf6  || \cf10 fabs\cf6 (n1.\cf11 angle\cf6 ()) == \cf9 PI\cf6 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 auto\cf6  it = \cf10 lower_bound\cf6 (\cf9 up\cf6 .\cf10 begin\cf6 (), \cf9 up\cf6 .\cf10 end\cf6 (), n1, \cf11 cmpV\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 if\cf6 (it != \cf9 up\cf6 .\cf10 end\cf6 ())ind1 = (*it).\cf9 ind\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 else\cf6  ind1 = \cf9 down\cf6 [\cf8 0\cf6 ].\cf9 ind\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \}\cf5 else\cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 auto\cf6  it = \cf10 lower_bound\cf6 (\cf9 down\cf6 .\cf10 begin\cf6 (), \cf9 down\cf6 .\cf10 end\cf6 (), n1, \cf11 cmpV\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 if\cf6 (it != \cf9 down\cf6 .\cf10 end\cf6 ())ind1 = (*it).\cf9 ind\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 else\cf6  ind1 = \cf9 up\cf6 [\cf8 0\cf6 ].\cf9 ind\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6 (n2.\cf11 angle\cf6 () >= \cf8 0\cf6  || \cf10 fabs\cf6 (n2.\cf11 angle\cf6 ()) == \cf9 PI\cf6 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 auto\cf6  it = \cf10 lower_bound\cf6 (\cf9 up\cf6 .\cf10 begin\cf6 (), \cf9 up\cf6 .\cf10 end\cf6 (), n2, \cf11 cmpV\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 if\cf6 (it != \cf9 up\cf6 .\cf10 end\cf6 ())ind2 = (*it).\cf9 ind\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 else\cf6  ind2 = \cf9 down\cf6 [\cf8 0\cf6 ].\cf9 ind\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \}\cf5 else\cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 auto\cf6  it = \cf10 lower_bound\cf6 (\cf9 down\cf6 .\cf10 begin\cf6 (), \cf9 down\cf6 .\cf10 end\cf6 (), n2, \cf11 cmpV\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 if\cf6 (it != \cf9 down\cf6 .\cf10 end\cf6 ())ind2 = (*it).\cf9 ind\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 else\cf6  ind2 = \cf9 up\cf6 [\cf8 0\cf6 ].\cf9 ind\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  \{\cf9 convexHall\cf6 [\cf10 ind1\cf6 ], \cf9 convexHall\cf6 [\cf10 ind2\cf6 ]\};
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  intersect_1(\cf5 double\cf6  a, \cf5 double\cf6  b, \cf5 double\cf6  c, \cf5 double\cf6  d) \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6  (a > b)\cf10 swap\cf6 (a, b);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6  (c > d)\cf10 swap\cf6 (c, d);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf10 max\cf6 (a, c) <= \cf10 min\cf6 (b, d);
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  intersect(\cf9 Point\cf6  & A, \cf9 Point\cf6  & B, \cf9 Point\cf6  & C, \cf9 Point\cf6  & D)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Vector\cf6  AB(A, B), BA(B, A), AC(A, C), AD(A, D), BC(B, C), BD(B, D);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Vector\cf6  CD(C, D), DC(D, C), DA(D, A), DB(D, B), CA(C, A), CB(C, B);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (\cf11 cross_product\cf6 (AB, AC) == \cf8 0\cf6  && \cf11 cross_product\cf6 (AB, AD) == \cf8 0\cf6 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6 (\cf11 intersect_1\cf6 (A.\cf9 x\cf6 , B.\cf9 x\cf6 , C.\cf9 x\cf6 , D.\cf9 x\cf6 ) && \cf11 intersect_1\cf6 (A.\cf9 y\cf6 , B.\cf9 y\cf6 , C.\cf9 y\cf6 , D.\cf9 y\cf6 ))\cf5 return\cf6  \cf5 true\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 else\cf6  \cf5 return\cf6  \cf5 false\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 bool\cf6  ans = (!\cf11 one\cf6 (\cf11 cross_product\cf6 (AB, AC), \cf11 cross_product\cf6 (AB, AD)) && !\cf11 one\cf6 (\cf11 cross_product\cf6 (CD, CA), \cf11 cross_product\cf6 (CD, CB)));
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  ans;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 double\cf6  dist(\cf9 Point\cf6  A, \cf9 Point\cf6  B)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Vector\cf6  AB(A, B);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  AB.\cf11 len\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 double\cf6  dist(\cf9 Point\cf6  A, \cf9 Point\cf6  B, \cf9 Point\cf6  C)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Vector\cf6  BC(B, C), CB(C, B), BA(B, A), CA(C, A);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Line\cf6  l(B, C);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (\cf11 dot_product\cf6 (BC, BA) >= \cf8 0\cf6  && \cf11 dot_product\cf6 (CB, CA) >= \cf8 0\cf6 )\cf5 return\cf6  \cf10 fabs\cf6 (l.\cf11 perp_sz\cf6 (A));
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6  \cf5 if\cf6 (\cf11 dot_product\cf6 (BC, BA) < \cf8 0\cf6 )\cf5 return\cf6  \cf11 dist\cf6 (A, B);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6  \cf5 return\cf6  \cf11 dist\cf6 (A, C);
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 double\cf6  dist(\cf9 Point\cf6  A, \cf9 Ray\cf6  Q)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Point\cf6  B = Q.\cf9 A\cf6 , C = Q.\cf9 B\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Vector\cf6  BC(B, C), BA(B, A);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Line\cf6  l(B, C);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (\cf11 dot_product\cf6 (BC, BA) < \cf8 0\cf6 )\cf5 return\cf6  \cf11 dist\cf6 (A, B);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6  \cf5 return\cf6  \cf10 fabs\cf6 (l.\cf11 perp_sz\cf6 (A));
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 double\cf6  dist(\cf9 Point\cf6  A, \cf9 Line\cf6  L)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf10 fabs\cf6 (L.\cf11 perp_sz\cf6 (A));
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 double\cf6  dist(\cf9 Point\cf6  A, \cf9 Point\cf6  B, \cf9 Point\cf6  C, \cf9 Point\cf6  D)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (\cf11 intersect\cf6 (A, B, C, D))\cf5 return\cf6  \cf8 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 else\cf6  \cf5 return\cf6  \cf10 min\cf6 (\{\cf11 dist\cf6 (A, C, D), \cf11 dist\cf6 (B, C, D), \cf11 dist\cf6 (C, A, B), \cf11 dist\cf6 (D, A, B)\});
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 double\cf6  dist(\cf9 Point\cf6  A, \cf9 Point\cf6  B, \cf9 Ray\cf6  Q)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Point\cf6  C = Q.\cf9 A\cf6 , D = Q.\cf9 B\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Vector\cf6  CD(C, D);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     CD = CD * \cf9 maxN\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     D = D + CD;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf11 dist\cf6 (A, B, C, D);
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 double\cf6  dist(\cf9 Point\cf6  A, \cf9 Point\cf6  B, \cf9 Line\cf6  L)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Point\cf6  C = L.\cf11 getPoint\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Vector\cf6  n = \cf11 ort\cf6 (L.\cf11 normal\cf6 ());
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Vector\cf6  n1 = n * \cf9 maxN\cf6 , n2 = n * (-\cf9 maxN\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     C = C + n1;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Point\cf6  D = C + n2;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf11 dist\cf6 (A, B, C, D);
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 double\cf6  dist(\cf9 Ray\cf6  Q1, \cf9 Ray\cf6  Q2)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Point\cf6  A = Q1.\cf9 A\cf6 , B = Q1.\cf9 B\cf6 , C = Q2.\cf9 A\cf6 , D = Q2.\cf9 B\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Vector\cf6  AB(A, B), CD(C, D);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     AB = AB * \cf9 maxN\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     CD = CD * \cf9 maxN\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     B = B + AB;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     D = D + CD;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf11 dist\cf6 (A, B, C, D);
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 double\cf6  dist(\cf9 Ray\cf6  Q, \cf9 Line\cf6  L)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Point\cf6  A = Q.\cf9 A\cf6 , B = Q.\cf9 B\cf6 , C = L.\cf11 getPoint\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Vector\cf6  AB(A, B);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     AB = AB * \cf9 maxN\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     B = B + AB;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Vector\cf6  n = \cf11 ort\cf6 (L.\cf11 normal\cf6 ());
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Vector\cf6  n1 = n * \cf9 maxN\cf6 , n2 = n * (-\cf9 maxN\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     C = C + n1;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Point\cf6  D = C + n2;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf11 dist\cf6 (A, B, C, D);
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 double\cf6  dist(\cf9 Line\cf6  L1, \cf9 Line\cf6  L2)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Point\cf6  A = L1.\cf11 getPoint\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Vector\cf6  n = \cf11 ort\cf6 (L1.\cf11 normal\cf6 ());
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Vector\cf6  n1 = n * \cf9 maxN\cf6 , n2 = n * (-\cf9 maxN\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     A = A + n1;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Point\cf6  B = A + n2;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Point\cf6  C = L2.\cf11 getPoint\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Vector\cf6  m = \cf11 ort\cf6 (L2.\cf11 normal\cf6 ());
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Vector\cf6  m1 = m * \cf9 maxN\cf6 , m2 = m * (-\cf9 maxN\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     C = C + m1;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Point\cf6  D = C + m2;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf11 dist\cf6 (A, B, C, D);
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 signed\cf6  main()\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 Point\cf6  A, B, C, D; \cf7 cin\cf6  >> A >> B >> C >> D;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 cout\cf6 .\cf10 precision\cf6 (\cf8 20\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 cout\cf6  << \cf11 dist\cf6 (A, C) << \cf10 endl\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 cout\cf6  << \cf11 dist\cf6 (A, C, D) << \cf10 endl\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 cout\cf6  << \cf11 dist\cf6 (A, \cf9 Ray\cf6 (C, D)) << \cf10 endl\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 cout\cf6  << \cf11 dist\cf6 (A, \cf9 Line\cf6 (C, D)) << \cf10 endl\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 cout\cf6  << \cf11 dist\cf6 (C, A, B) << \cf10 endl\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 cout\cf6  << \cf11 dist\cf6 (A, B, C, D) << \cf10 endl\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 cout\cf6  << \cf11 dist\cf6 (A, B, \cf9 Ray\cf6 (C, D)) << \cf10 endl\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 cout\cf6  << \cf11 dist\cf6 (A, B, \cf9 Line\cf6 (C, D)) << \cf10 endl\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 cout\cf6  << \cf11 dist\cf6 (C, \cf9 Ray\cf6 (A, B)) << \cf10 endl\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 cout\cf6  << \cf11 dist\cf6 (C, D, \cf9 Ray\cf6 (A, B)) << \cf10 endl\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 cout\cf6  << \cf11 dist\cf6 (\cf9 Ray\cf6 (A, B), \cf9 Ray\cf6 (C, D)) << \cf10 endl\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 cout\cf6  << \cf11 dist\cf6 (\cf9 Ray\cf6 (A, B), \cf9 Line\cf6 (C, D)) << \cf10 endl\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 cout\cf6  << \cf11 dist\cf6 (C, \cf9 Line\cf6 (A, B)) << \cf10 endl\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 cout\cf6  << \cf11 dist\cf6 (C, D, \cf9 Line\cf6 (A, B)) << \cf10 endl\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 cout\cf6  << \cf11 dist\cf6 (\cf9 Ray\cf6 (C, D), \cf9 Line\cf6 (A, B)) << \cf10 endl\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 cout\cf6  << \cf11 dist\cf6 (\cf9 Line\cf6 (A, B), \cf9 Line\cf6 (C, D)) << \cf10 endl\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf8 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
}