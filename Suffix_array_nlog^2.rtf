{\rtf1\ansi\ansicpg1251\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red255\green255\blue255;\red196\green26\blue22;
\red170\green13\blue145;\red0\green0\blue0;\red92\green38\blue153;\red63\green110\blue116;\red46\green13\blue110;
\red28\green0\blue207;\red38\green71\blue75;}
{\*\expandedcolortbl;;\csgenericrgb\c39100\c22000\c12500;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c77000\c10200\c8600;
\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c0\c0\c0;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c24700\c43100\c45600;\csgenericrgb\c18100\c5200\c43100;
\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c14900\c27800\c29400;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 #include\cf4 <iostream>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <cmath>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <algorithm>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <vector>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <unordered_map>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <unordered_set>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <map>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <random>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <algorithm>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <queue>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <stack>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <cstdio>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <ctime>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <cassert>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <sstream>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <set>
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 using\cf6  \cf5 namespace\cf6  \cf7 std\cf6 ;
\f1\fs24 \cf0 \
\

\f0\fs22 \cf2 #define int long long int
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 int\cf6  now;
\f1\fs24 \cf0 \

\f0\fs22 \cf5 int\cf6  n;
\f1\fs24 \cf0 \

\f0\fs22 \cf7 vector\cf6 <\cf5 int\cf6 > c;
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  cmp(\cf5 int\cf6  a, \cf5 int\cf6  b)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf8 c\cf6 [\cf9 a\cf6 ] < \cf8 c\cf6 [\cf9 b\cf6 ] || (\cf8 c\cf6 [\cf9 a\cf6 ] == \cf8 c\cf6 [\cf9 b\cf6 ] && \cf8 c\cf6 [(\cf9 a\cf6  + \cf9 now\cf6 ) % \cf9 n\cf6 ] < \cf8 c\cf6 [(\cf9 b\cf6  + \cf9 now\cf6 ) % \cf9 n\cf6 ]);
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 bool\cf6  cmp2(\cf5 int\cf6  a, \cf5 int\cf6  b)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf8 c\cf6 [\cf9 a\cf6 ] < \cf8 c\cf6 [\cf9 b\cf6 ];
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf7 vector\cf6 <\cf5 int\cf6 > getSuffMass(\cf7 string\cf6  & s)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     s.\cf9 push_back\cf6 (\cf10 '$'\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf8 n\cf6  = (\cf5 int\cf6 )s.\cf9 size\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf8 now\cf6  = \cf10 1\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 vector\cf6 <\cf5 int\cf6 > suf(\cf8 n\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf8 c\cf6 .\cf9 resize\cf6 (\cf8 n\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6 (\cf5 int\cf6  i = \cf10 0\cf6 ; i < \cf8 n\cf6 ; i++)suf[\cf9 i\cf6 ] = i;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6 (\cf5 int\cf6  i = \cf10 0\cf6 ; i < \cf8 n\cf6 ; i++)\cf8 c\cf6 [\cf9 i\cf6 ] = s[\cf9 i\cf6 ] - \cf10 'a'\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf9 sort\cf6 (suf.\cf9 begin\cf6 (), suf.\cf9 end\cf6 (), \cf11 cmp2\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6 (\cf5 int\cf6  t = \cf10 1\cf6 ; t < \cf8 n\cf6 ; t *= \cf10 2\cf6 , \cf8 now\cf6  *= \cf10 2\cf6 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf7 vector\cf6 <\cf5 int\cf6 > nc(\cf8 n\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf9 sort\cf6 (suf.\cf9 begin\cf6 (), suf.\cf9 end\cf6 (), \cf11 cmp\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6         nc[\cf9 suf\cf6 [\cf10 0\cf6 ]] = \cf10 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 for\cf6 (\cf5 int\cf6  i = \cf10 1\cf6 ; i < \cf8 n\cf6 ; i++)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 int\cf6  l1 = suf[\cf9 i\cf6  - \cf10 1\cf6 ];
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 int\cf6  r1 = (suf[\cf9 i\cf6  - \cf10 1\cf6 ] + \cf8 now\cf6 ) % \cf8 n\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 int\cf6  l2 = suf[\cf9 i\cf6 ];
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 int\cf6  r2 = (suf[\cf9 i\cf6 ] + \cf8 now\cf6 ) % \cf8 n\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 if\cf6 (\cf8 c\cf6 [\cf9 l1\cf6 ] != \cf8 c\cf6 [\cf9 l2\cf6 ] || \cf8 c\cf6 [\cf9 r1\cf6 ] != \cf8 c\cf6 [\cf9 r2\cf6 ])\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6                 nc[\cf9 suf\cf6 [\cf9 i\cf6 ]] = nc[\cf9 suf\cf6 [\cf9 i\cf6  - \cf10 1\cf6 ]] + \cf10 1\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \}\cf5 else\cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6                 nc[\cf9 suf\cf6 [\cf9 i\cf6 ]] = nc[\cf9 suf\cf6 [\cf9 i\cf6  - \cf10 1\cf6 ]];
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf8 c\cf6  = nc;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     suf.\cf9 erase\cf6 (suf.\cf9 begin\cf6 ());
\f1\fs24 \cf0 \

\f0\fs22 \cf6     s.\cf9 pop_back\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf8 n\cf6  = (\cf5 int\cf6 )s.\cf9 size\cf6 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  suf;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf7 vector\cf6 <\cf5 int\cf6 > getOSuffMass(\cf7 vector\cf6 <\cf5 int\cf6 > & suf)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 vector\cf6 <\cf5 int\cf6 > osuf(\cf8 n\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6 (\cf5 int\cf6  i = \cf10 0\cf6 ; i < \cf8 n\cf6 ; i++)osuf[\cf9 suf\cf6 [\cf9 i\cf6 ]] = i;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  osuf;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf7 vector\cf6 <\cf5 int\cf6 > getLcp(\cf7 string\cf6  & s, \cf7 vector\cf6 <\cf5 int\cf6 > & p, \cf7 vector\cf6 <\cf5 int\cf6 > & pos)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 vector\cf6 <\cf5 int\cf6 > lcp(\cf8 n\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 int\cf6  k = \cf10 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6 (\cf5 int\cf6  i = \cf10 0\cf6 ; i < \cf8 n\cf6 ; i++)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6 (pos[\cf9 i\cf6 ] == \cf8 n\cf6  - \cf10 1\cf6 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6             k = \cf10 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 continue\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 int\cf6  j = p[\cf9 pos\cf6 [\cf9 i\cf6 ] + \cf10 1\cf6 ];
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 while\cf6 (s[\cf9 i\cf6  + \cf9 k\cf6 ] == s[\cf9 j\cf6  + \cf9 k\cf6 ])\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6             k++;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6         lcp[\cf9 pos\cf6 [\cf9 i\cf6 ]] = k;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6 (k > \cf10 0\cf6 )k--;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  lcp;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 void\cf6  getStr(\cf5 int\cf6  st, \cf5 int\cf6  k, \cf5 const\cf6  \cf7 string\cf6  & s)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6 (\cf5 int\cf6  i = st; i < st + k; i++)\cf7 cout\cf6  << s[\cf9 i\cf6 ];
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 signed\cf6  main()\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 int\cf6  k;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 string\cf6  s; \cf7 cin\cf6  >> s >> k;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 vector\cf6 <\cf5 int\cf6 > sa = \cf11 getSuffMass\cf6 (s);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 vector\cf6 <\cf5 int\cf6 > osa = \cf11 getOSuffMass\cf6 (sa);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf7 vector\cf6 <\cf5 int\cf6 > lcp = \cf11 getLcp\cf6 (s, sa, osa);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 if\cf6 (\cf8 n\cf6  - sa[\cf10 0\cf6 ] >= k)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf11 getStr\cf6 (sa[\cf10 0\cf6 ], k, s);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 return\cf6  \cf10 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     k -= (\cf8 n\cf6  - sa[\cf10 0\cf6 ]);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6 (\cf5 int\cf6  i = \cf10 1\cf6 ; i < \cf8 n\cf6 ; i++)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 int\cf6  cnt = \cf8 n\cf6  - sa[\cf9 i\cf6 ] - lcp[\cf9 i\cf6  - \cf10 1\cf6 ];
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6 (cnt >= k)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf11 getStr\cf6 (sa[\cf9 i\cf6 ], lcp[\cf9 i\cf6  - \cf10 1\cf6 ] + k, s);
\f1\fs24 \cf0 \

\f0\fs22 \cf6             \cf5 return\cf6  \cf10 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6         k -= cnt;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf11 getStr\cf6 (sa[\cf9 n\cf6  - \cf10 1\cf6 ], \cf8 n\cf6  - sa[\cf9 n\cf6  - \cf10 1\cf6 ], s);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf10 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
}