{\rtf1\ansi\ansicpg1251\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red255\green255\blue255;\red0\green0\blue0;
\red92\green38\blue153;\red28\green0\blue207;\red46\green13\blue110;\red63\green110\blue116;}
{\*\expandedcolortbl;;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0;
\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c18100\c5200\c43100;\csgenericrgb\c24700\c43100\c45600;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 struct\cf4  Hash\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf5 vector\cf4 <\cf2 long\cf4  \cf2 long\cf4  \cf2 int\cf4 > h;
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf5 vector\cf4 <\cf2 long\cf4  \cf2 long\cf4  \cf2 int\cf4 > p;
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf2 long\cf4  \cf2 long\cf4  \cf2 int\cf4  b = \cf6 255\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf2 long\cf4  \cf2 long\cf4  \cf2 int\cf4  m = \cf6 1e9\cf4  + \cf6 7\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4     Hash(\cf5 string\cf4  & s)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf2 int\cf4  n = (\cf2 int\cf4 )s.\cf7 size\cf4 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf8 h\cf4  = \cf5 vector\cf4 <\cf2 long\cf4  \cf2 long\cf4  \cf2 int\cf4 >(n + \cf6 1\cf4 , \cf6 0\cf4 );
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf8 p\cf4  = \cf5 vector\cf4 <\cf2 long\cf4  \cf2 long\cf4  \cf2 int\cf4 >(n + \cf6 1\cf4 , \cf6 1\cf4 );
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf2 for\cf4 (\cf2 int\cf4  i = \cf6 1\cf4 ; i <= n; i++)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4             \cf8 h\cf4 [\cf7 i\cf4 ] = (\cf8 h\cf4 [\cf7 i\cf4  - \cf6 1\cf4 ] * \cf8 b\cf4  + s[\cf7 i\cf4  - \cf6 1\cf4 ]) % \cf8 m\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4             \cf8 p\cf4 [\cf7 i\cf4 ] = (\cf8 p\cf4 [\cf7 i\cf4  - \cf6 1\cf4 ] * \cf8 b\cf4 ) % \cf8 m\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf2 long\cf4  \cf2 long\cf4  \cf2 int\cf4  get_hash_by_len(\cf2 int\cf4  ind, \cf2 int\cf4  len)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf2 return\cf4  (\cf8 h\cf4 [\cf7 ind\cf4  + \cf7 len\cf4  - \cf6 1\cf4 ] - (\cf8 h\cf4 [\cf7 ind\cf4  - \cf6 1\cf4 ] * \cf8 p\cf4 [\cf7 len\cf4 ]) % \cf8 m\cf4  + \cf8 m\cf4 ) % \cf8 m\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf2 long\cf4  \cf2 long\cf4  \cf2 int\cf4  get_hash_segm(\cf2 int\cf4  l, \cf2 int\cf4  r)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf2 return\cf4  (\cf8 h\cf4 [\cf7 r\cf4 ] - (\cf8 h\cf4 [\cf7 l\cf4  - \cf6 1\cf4 ] * \cf8 p\cf4 [\cf7 r\cf4  - \cf7 l\cf4  + \cf6 1\cf4 ]) % \cf8 m\cf4  + \cf8 m\cf4 ) % \cf8 m\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4 \};}