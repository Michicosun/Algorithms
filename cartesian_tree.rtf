{\rtf1\ansi\ansicpg1251\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red92\green38\blue153;\red255\green255\blue255;\red0\green0\blue0;
\red28\green0\blue207;\red170\green13\blue145;\red63\green110\blue116;\red38\green71\blue75;\red196\green26\blue22;
\red46\green13\blue110;}
{\*\expandedcolortbl;;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0;
\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c24700\c43100\c45600;\csgenericrgb\c14900\c27800\c29400;\csgenericrgb\c77000\c10200\c8600;
\csgenericrgb\c18100\c5200\c43100;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 mt19937\cf4  mt_rand(\cf5 42\cf4 );
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6 struct\cf4  node\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf6 int\cf4  data, y, size;
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf6 bool\cf4  reversed;
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf6 int\cf4  summ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf7 node\cf4  * left;
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf7 node\cf4  * right;
\f1\fs24 \cf0 \

\f0\fs22 \cf4     node(\cf6 int\cf4  data = \cf5 0\cf4 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 this\cf4 ->\cf7 data\cf4  = data;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 this\cf4 ->\cf7 summ\cf4  = data;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 this\cf4 ->\cf7 y\cf4  = \cf7 mt_rand\cf4 ();
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 this\cf4 ->\cf7 size\cf4  = \cf5 1\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 this\cf4 ->\cf7 reversed\cf4  = \cf6 false\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 this\cf4 ->\cf7 left\cf4  = \cf6 nullptr\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 this\cf4 ->\cf7 right\cf4  = \cf6 nullptr\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4 \};
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6 typedef\cf4  \cf7 node\cf4  * pnode;
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6 class\cf4  cartesianTree\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6 public\cf4 :
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf7 pnode\cf4  root;
\f1\fs24 \cf0 \

\f0\fs22 \cf4     
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf6 int\cf4  getSize(\cf7 pnode\cf4  tree)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 if\cf4 (!tree)\cf6 return\cf4  \cf5 0\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 else\cf4  \cf6 return\cf4  tree->\cf7 size\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4     
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf6 int\cf4  getSumm(\cf7 pnode\cf4  tree)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 if\cf4 (!tree)\cf6 return\cf4  \cf5 0\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 else\cf4  \cf6 return\cf4  tree->\cf7 summ\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4     
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf6 void\cf4  recalc(\cf7 pnode\cf4  tree)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 if\cf4 (!tree)\cf6 return\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 else\cf4 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf4             tree->\cf7 size\cf4  = \cf8 getSize\cf4 (tree->\cf7 left\cf4 ) + \cf8 getSize\cf4 (tree->\cf7 right\cf4 ) + \cf5 1\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4             tree->\cf7 summ\cf4  = tree->\cf7 data\cf4  + \cf8 getSumm\cf4 (tree->\cf7 left\cf4 ) + \cf8 getSumm\cf4 (tree->\cf7 right\cf4 );
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4     
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf6 void\cf4  push(\cf7 pnode\cf4  tree)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 if\cf4 (!tree)\cf6 return\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 if\cf4 (!tree->\cf7 reversed\cf4 )\cf6 return\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf7 pnode\cf4  p = tree->\cf7 left\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         tree->\cf7 left\cf4  = tree->\cf7 right\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         tree->\cf7 right\cf4  = p;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 if\cf4 (tree->\cf7 left\cf4 )tree->\cf7 left\cf4 ->\cf7 reversed\cf4  ^= \cf6 true\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 if\cf4 (tree->\cf7 right\cf4 )tree->\cf7 right\cf4 ->\cf7 reversed\cf4  ^= \cf6 true\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         tree->\cf7 reversed\cf4  = \cf6 false\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4     
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf2 pair\cf4 <\cf7 pnode\cf4 , \cf7 pnode\cf4 > split(\cf7 pnode\cf4  tree, \cf6 int\cf4  x)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 if\cf4 (!tree)\cf6 return\cf4  \{\cf6 nullptr\cf4 , \cf6 nullptr\cf4 \};
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf8 push\cf4 (tree);
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 if\cf4 (\cf8 getSize\cf4 (tree->\cf7 left\cf4 ) >= x)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4             \cf6 auto\cf4  p = \cf8 split\cf4 (tree->\cf7 left\cf4 , x);
\f1\fs24 \cf0 \

\f0\fs22 \cf4             tree->\cf7 left\cf4  = p.\cf2 second\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4             \cf8 recalc\cf4 (tree);
\f1\fs24 \cf0 \

\f0\fs22 \cf4             \cf6 return\cf4  \{p.\cf2 first\cf4 , tree\};
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \}\cf6 else\cf4 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf4             \cf6 auto\cf4  p = \cf8 split\cf4 (tree->\cf7 right\cf4 , x - \cf8 getSize\cf4 (tree->\cf7 left\cf4 ) - \cf5 1\cf4 );
\f1\fs24 \cf0 \

\f0\fs22 \cf4             tree->\cf7 right\cf4  = p.\cf2 first\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4             \cf8 recalc\cf4 (tree);
\f1\fs24 \cf0 \

\f0\fs22 \cf4             \cf6 return\cf4  \{tree, p.\cf2 second\cf4 \};
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4     
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf7 pnode\cf4  merge(\cf7 pnode\cf4  left, \cf7 pnode\cf4  right)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 if\cf4 (!left)\cf6 return\cf4  right;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 else\cf4  \cf6 if\cf4 (!right)\cf6 return\cf4  left;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf8 push\cf4 (left);
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf8 push\cf4 (right);
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 if\cf4 (left->\cf7 y\cf4  >= right->\cf7 y\cf4 )\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4             left->\cf7 right\cf4  = \cf8 merge\cf4 (left->\cf7 right\cf4 , right);
\f1\fs24 \cf0 \

\f0\fs22 \cf4             \cf8 recalc\cf4 (left);
\f1\fs24 \cf0 \

\f0\fs22 \cf4             \cf6 return\cf4  left;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \}\cf6 else\cf4 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf4             right->\cf7 left\cf4  = \cf8 merge\cf4 (left, right->\cf7 left\cf4 );
\f1\fs24 \cf0 \

\f0\fs22 \cf4             \cf8 recalc\cf4 (right);
\f1\fs24 \cf0 \

\f0\fs22 \cf4             \cf6 return\cf4  right;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4     cartesianTree()\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf7 root\cf4  = \cf6 nullptr\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4     
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf7 pnode\cf4  getRoot()\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 return\cf4  \cf7 root\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4     
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf6 void\cf4  push_back(\cf6 int\cf4  x)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf7 pnode\cf4  newNode = \cf6 new\cf4  \cf7 node\cf4 (x);
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf7 root\cf4  = \cf8 merge\cf4 (\cf7 root\cf4 , newNode);
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4     
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf6 void\cf4  insert(\cf6 int\cf4  ind, \cf6 int\cf4  x)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf7 pnode\cf4  newNode = \cf6 new\cf4  \cf7 node\cf4 (x);
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 auto\cf4  res = \cf8 split\cf4 (\cf7 root\cf4 , ind);
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf7 root\cf4  = \cf8 merge\cf4 (\cf8 merge\cf4 (res.\cf2 first\cf4 , newNode), res.\cf2 second\cf4 );
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4     
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf6 void\cf4  reverse(\cf6 int\cf4  l, \cf6 int\cf4  r)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 auto\cf4  res1 = \cf8 split\cf4 (\cf7 root\cf4 , l);
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 auto\cf4  res2 = \cf8 split\cf4 (res1.\cf2 second\cf4 , r - l + \cf5 1\cf4 );
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 if\cf4 (res2.\cf2 first\cf4 )res2.\cf2 first\cf4 ->\cf7 reversed\cf4  ^= \cf6 true\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf7 root\cf4  = \cf8 merge\cf4 (\cf8 merge\cf4 (res1.\cf2 first\cf4 , res2.\cf2 first\cf4 ), res2.\cf2 second\cf4 );
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4     
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf6 int\cf4  getSummSegm(\cf6 int\cf4  l, \cf6 int\cf4  r)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 auto\cf4  res1 = \cf8 split\cf4 (\cf7 root\cf4 , l);
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 auto\cf4  res2 = \cf8 split\cf4 (res1.\cf2 second\cf4 , r - l + \cf5 1\cf4 );
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 int\cf4  ans = res2.\cf2 first\cf4 ->\cf7 summ\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf7 root\cf4  = \cf8 merge\cf4 (\cf8 merge\cf4 (res1.\cf2 first\cf4 , res2.\cf2 first\cf4 ), res2.\cf2 second\cf4 );
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 return\cf4  ans;
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4     
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf6 void\cf4  pprint(\cf7 pnode\cf4  tree)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf6 if\cf4 (!tree)\cf6 return\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf8 push\cf4 (tree);
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf8 pprint\cf4 (tree->\cf7 left\cf4 );
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf2 cout\cf4  << tree->\cf7 data\cf4  << \cf9 " "\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf8 pprint\cf4 (tree->\cf7 right\cf4 );
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4     
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \cf6 void\cf4  print()\{
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf8 pprint\cf4 (\cf7 root\cf4 );
\f1\fs24 \cf0 \

\f0\fs22 \cf4         \cf2 cout\cf4  << \cf10 endl\cf4 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf4     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4 \};}