{\rtf1\ansi\ansicpg1251\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red255\green255\blue255;\red196\green26\blue22;
\red170\green13\blue145;\red0\green0\blue0;\red28\green0\blue207;}
{\*\expandedcolortbl;;\csgenericrgb\c39100\c22000\c12500;\csgray\c100000;\csgenericrgb\c77000\c10200\c8600;
\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c0\c0\c0;\csgenericrgb\c11000\c0\c81000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 #include\cf4 <iostream>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <algorithm>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <cmath>
\f1\fs24 \cf0 \

\f0\fs22 \cf2 #include\cf4 <vector>
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 using\cf6  \cf5 namespace\cf6  std;
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 struct\cf6  Point\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  x, y;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     Point(\cf5 double\cf6  x, \cf5 double\cf6  y)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->x = x;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 this\cf6 ->y = y;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \};
\f1\fs24 \cf0 \
\

\f0\fs22 \cf6 Point S(\cf7 0\cf6 , \cf7 1\cf6 ), L(\cf7 1\cf6 , \cf7 0\cf6 );
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 double\cf6  get_l(\cf5 const\cf6  Point & a, \cf5 const\cf6  Point & b)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  dx = fabs(a.x - b.x);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  dy = fabs(a.y - b.y);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  sqrt(dx * dx + dy * dy);
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 double\cf6  get_time(\cf5 const\cf6  Point & b, \cf5 int\cf6  Vp, \cf5 int\cf6  Vf)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  len_to_S = get_l(b, S);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  len_to_L = get_l(b, L);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  len_to_S / Vp + len_to_L / Vf;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 double\cf6  tern(\cf5 int\cf6  Vp, \cf5 int\cf6  Vf, \cf5 double\cf6  a)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  l = \cf7 0\cf6 , r = \cf7 1\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 for\cf6  (\cf5 int\cf6  i = \cf7 0\cf6 ; i < \cf7 100\cf6 ; i++)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 double\cf6  m1 = (\cf7 2\cf6  * l + r) / \cf7 3\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 double\cf6  m2 = (l + \cf7 2\cf6  * r) / \cf7 3\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 double\cf6  fm1 = get_time(Point(m1, a), Vp, Vf);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 double\cf6  fm2 = get_time(Point(m2, a), Vp, Vf);
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \cf5 if\cf6  (fm1 < fm2)\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6             r = m2;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \}\cf5 else\cf6 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf6             l = m1;
\f1\fs24 \cf0 \

\f0\fs22 \cf6         \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  (l + r) / \cf7 2\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 int\cf6  main()\{
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 int\cf6  Vp, Vf;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 double\cf6  a;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     cin >> Vp >> Vf >> a;
\f1\fs24 \cf0 \

\f0\fs22 \cf6     cout.precision(\cf7 20\cf6 );
\f1\fs24 \cf0 \

\f0\fs22 \cf6     cout << tern(Vp, Vf, a);
\f1\fs24 \cf0 \

\f0\fs22 \cf6     \cf5 return\cf6  \cf7 0\cf6 ;
\f1\fs24 \cf0 \

\f0\fs22 \cf6 \}
\f1\fs24 \cf0 \
}